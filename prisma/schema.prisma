generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String              @id @default(cuid())
    name             String
    phone            String?
    email            String?             @unique
    emailVerified    DateTime?
    isPhoneVerified  Boolean             @default(false)
    image            String?
    accounts         Account[]
    sessions         Session[]
    role             Role                @default(USER)
    createdAt        DateTime            @default(now())
    updatedAt        DateTime?           @updatedAt
    businessOwner    Business[]          @relation("BusinessOwner")
    reviews          Review[]
    appointments     Appointment[]
    UserConnectionA  UserConnection[]    @relation("UserA")
    UserConnectionB  UserConnection[]    @relation("UserB")
    BusinessFollower BusinessFollowing[] @relation("BusinessFollower")
}

model BusinessFollowing {
    id         Int      @id @default(autoincrement())
    follower   User     @relation("BusinessFollower", fields: [followerId], references: [id])
    followerId String
    business   Business @relation("FollowedBussines", fields: [businessId], references: [id])
    businessId Int

    @@unique([followerId, businessId])
}

model UserConnection {
    id              Int    @id @default(autoincrement())
    userA           User   @relation("UserA", fields: [userConnectionA], references: [id])
    UserB           User   @relation("UserB", fields: [userConnectionB], references: [id])
    userConnectionA String
    userConnectionB String

    @@unique([userConnectionA, userConnectionB])
}

model Business {
    id            Int        @id @default(autoincrement())
    name          String
    description   String?
    address       String
    phone         String
    whatsappLink  String?
    instagramLink String?
    categories    Category[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt

    owner   User   @relation("BusinessOwner", fields: [ownerId], references: [id])
    ownerId String

    services         BusinessService[]
    appointments     Appointment[]
    reviews          Review[]
    images           Image[]
    FollowedBussines BusinessFollowing[] @relation("FollowedBussines")
}

model Review {
    id      Int     @id @default(autoincrement())
    rating  Int
    comment String?

    business   Business @relation(fields: [businessId], references: [id])
    businessId Int

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
}

model Image {
    id         Int      @id @default(autoincrement())
    key        String // S3 key
    business   Business @relation(fields: [businessId], references: [id])
    businessId Int
}

model Service {
    id              Int      @id @default(autoincrement())
    name            String
    description     String?
    durationMinutes Int
    price           Float
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    businessServices BusinessService[]
    appointments     Appointment[]
}

model Appointment {
    id          Int               @id @default(autoincrement())
    description String?
    date        DateTime
    status      AppointmentStatus

    business   Business @relation(fields: [businessId], references: [id])
    businessId Int

    service   Service @relation(fields: [serviceId], references: [id])
    serviceId Int

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BusinessService {
    id         Int      @id @default(autoincrement())
    business   Business @relation(fields: [businessId], references: [id])
    businessId Int
    service    Service  @relation(fields: [serviceId], references: [id])
    serviceId  Int

    @@unique([businessId, serviceId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    BUSINESS_OWNER
    ADMIN
}

enum Category {
    MEN_BARBER
    WOMEN_BARBER
    NAILS_BEAUTY
    COSMETICS
}

enum AppointmentStatus {
    BOOKED
    CANCELLED
    COMPLETED
}
